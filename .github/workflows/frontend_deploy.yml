# このワークフローは、"main"ブランチへのプッシュがあった際に、
# 新しいコンテナイメージをAmazon ECRにビルドしてプッシュし、
# その後、新しいタスク定義をAmazon ECSにデプロイします。
#
# このワークフローを使用するには、以下のセットアップ手順を完了する必要があります：
#
# 1. イメージを保存するためのECRリポジトリを作成します。
#    例: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`
#    ワークフロー内の `ECR_REPOSITORY` 環境変数の値を、リポジトリの名前に置き換えてください。
#    ワークフロー内の `AWS_REGION` 環境変数の値を、リポジトリのリージョンに置き換えてください。
#
# 2. ECSタスク定義、ECSクラスター、およびECSサービスを作成します。
#    例: ECSコンソールの開始ガイドに従ってください：
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    ワークフロー内の `ECS_SERVICE` 環境変数の値を、Amazon ECSサービスの名前に置き換えてください。
#    ワークフロー内の `ECS_CLUSTER` 環境変数の値を、クラスターの名前に置き換えてください。
#
# 3. ECSタスク定義をJSONファイルとしてリポジトリに保存します。
#    フォーマットは `aws ecs register-task-definition --generate-cli-skeleton` の出力に従う必要があります。
#    ワークフロー内の `ECS_TASK_DEFINITION` 環境変数の値を、JSONファイルのパスに置き換えてください。
#    ワークフロー内の `CONTAINER_NAME` 環境変数の値を、タスク定義の `containerDefinitions` セクションにあるコンテナ名に置き換えてください。
#
# 4. IAMユーザーアクセスキーをGitHub Actionsのシークレットとして `AWS_ACCESS_KEY_ID` と `AWS_SECRET_ACCESS_KEY` の名前で保存します。
#    各アクションの推奨IAMポリシーとアクセスキーの資格情報の取り扱いに関するベストプラクティスは、以下のドキュメントを参照してください。

name: Amazon ECSフロントエンドデプロイ

on:
  push:
    branches: ["main"]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_REGION: ap-northeast-1
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  CONTAINER_NAME: ${{ secrets.FRONTEND_CONTAINER }}
  ECR_REPOSITORY: ${{ secrets.FRONTEND_ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.FRONTEND_ECS_SERVICE }}
  IMAGE_TAG: ${{ github.sha }}

permissions:
  contents: read

jobs:
  deploy:
    name: デプロイ
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: AWS認証情報の設定
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Amazon ECRへのログイン
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: イメージをビルドし、Amazon ECRにタグ付けしてプッシュ
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Dockerコンテナをビルドし、
          # ECRにプッシュしてからECSにデプロイします。
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./front/my-app/Dockerfile.prod ./front/my-app
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: タスク定義内の変数を置き換え
        run: |
          sed -i 's|${AWS_ACCOUNT_ID}|'"${{ secrets.AWS_ACCOUNT_ID }}"'|g' front/my-app/task-definition.json
          sed -i 's|${FRONTEND_CONTAINER}|'"${{ secrets.FRONTEND_CONTAINER }}"'|g' front/my-app/task-definition.json
          sed -i 's|${FRONTEND_ECR_REPOSITORY}|'"${{ secrets.FRONTEND_ECR_REPOSITORY }}"'|g' front/my-app/task-definition.json
          sed -i 's|${IMAGE_TAG}|'"${{ github.sha }}"'|g' front/my-app/task-definition.json

      - name: Amazon ECSタスク定義に新しいイメージIDを反映
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: front/my-app/task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Amazon ECSタスク定義のデプロイ
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
