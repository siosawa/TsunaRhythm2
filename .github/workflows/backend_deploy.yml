name: Amazon ECSバックエンドデプロイ

on:
  push:
    branches: ["main"]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_REGION: ap-northeast-1
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  RAILS_CONTAINER_NAME: ${{ secrets.BACKEND_CONTAINER }}
  NGINX_CONTAINER_NAME: ${{ secrets.NGINX_CONTAINER }}
  RAILS_ECR_REPOSITORY: ${{ secrets.BACKEND_ECR_REPOSITORY }}
  NGINX_ECR_REPOSITORY: ${{ secrets.NGINX_ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.BACKEND_ECS_SERVICE }}
  IMAGE_TAG: ${{ github.sha }}

permissions:
  contents: read

jobs:
  deploy:
    name: バックエンドデプロイ
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: AWS認証情報の設定
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Amazon ECRへのログイン
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Railsコンテナのイメージをビルドし、Amazon ECRにタグ付けしてプッシュ
        id: build-rails-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$RAILS_ECR_REPOSITORY:$IMAGE_TAG -f ./back/Dockerfile.prod ./back
          docker push $ECR_REGISTRY/$RAILS_ECR_REPOSITORY:$IMAGE_TAG
          echo "RAILS_IMAGE=$ECR_REGISTRY/$RAILS_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Nginxコンテナのイメージをビルドし、Amazon ECRにタグ付けしてプッシュ
        id: build-nginx-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$NGINX_ECR_REPOSITORY:$IMAGE_TAG --no-cache -f ./nginx/Dockerfile ./nginx
          docker push $ECR_REGISTRY/$NGINX_ECR_REPOSITORY:$IMAGE_TAG
          echo "NGINX_IMAGE=$ECR_REGISTRY/$NGINX_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: 環境変数の確認
        run: |
          echo "RAILS_IMAGE=$RAILS_IMAGE"
          echo "NGINX_IMAGE=$NGINX_IMAGE"

      - name: タスク定義内の変数を置き換え
        run: |
          sed -i 's|<RAILS_IMAGE_TAG>|'"$RAILS_IMAGE"'|g' back/task-definition.json
          sed -i 's|<NGINX_IMAGE_TAG>|'"$NGINX_IMAGE"'|g' back/task-definition.json

      - name: Amazon ECSタスク定義に新しいイメージIDを反映
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: back/task-definition.json
          container-name: ${{ env.RAILS_CONTAINER_NAME }}
          image: $RAILS_IMAGE

      - name: Amazon ECSタスク定義にNginxイメージIDを反映
        id: nginx-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: back/task-definition.json
          container-name: ${{ env.NGINX_CONTAINER_NAME }}
          image: $NGINX_IMAGE

      - name: Amazon ECSタスク定義のデプロイ
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
